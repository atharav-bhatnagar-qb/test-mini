#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Pot.headers.fc";
#include "tact_Pot.stdlib.fc";
#include "tact_Pot.constants.fc";
#include "tact_Pot.storage.fc";

;;
;; Contract Pot functions
;;

(slice) $Pot$_contract_init() impure inline_ref {
    var (($self'owner)) = (null());
    $self'owner = __tact_context_get_sender();
    return ($self'owner);
}

((slice), ()) $Pot$_fun_ownerOnly((slice) $self) impure inline_ref {
    var (($self'owner)) = $self;
    throw_unless(59719, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'owner), ());
}

((slice), slice) $Pot$_fun_balance((slice) $self) impure inline_ref {
    var (($self'owner)) = $self;
    return (($self'owner), $Int$_fun_toCoinsString(__tact_my_balance()));
}

((slice), slice) $Pot$_fun_address((slice) $self) impure inline_ref {
    var (($self'owner)) = $self;
    return (($self'owner), my_address());
}

((slice), slice) $Pot$_fun_owner((slice) $self) impure inline_ref {
    var (($self'owner)) = $self;
    return (($self'owner), $self'owner);
}

((slice), (cell, cell)) $Pot$_fun_getRefInit((slice) $self, slice $jobId, slice $link) impure inline_ref {
    var (($self'owner)) = $self;
    var ($init'code, $init'data) = $Referral$_init_child(__tact_context_sys, $jobId, $link);
    return (($self'owner), ($init'code, $init'data));
}

((slice), slice) $Pot$_fun_linkAddress((slice) $self, slice $jobId, slice $link) impure inline_ref {
    var (($self'owner)) = $self;
    var ($refInit'code, $refInit'data) = ($self'owner)~$Pot$_fun_getRefInit($jobId, $link);
    return (($self'owner), $global_contractAddress(($refInit'code, $refInit'data)));
}

;;
;; Receivers of a Contract Pot
;;

(((slice)), ()) %$Pot$_internal_empty((slice) $self) impure inline {
    var ($self'owner) = $self;
    return (($self'owner), ());
}

((slice), ()) $Pot$_internal_text_63365f83ad1d185f336d0e64cfce19190f3623d6d976c30c6198ac209c8946ee((slice) $self) impure inline {
    var ($self'owner) = $self;
    ($self'owner)~$Pot$_fun_ownerOnly();
    $global_send($SendParameters$_constructor_to_value_mode_bounce(__tact_context_get_sender(), ((__tact_my_balance() - $Context$_get_value(__tact_context_get())) - 10000000), (2 + 64), true));
    return (($self'owner), ());
}

(((slice)), ()) $Pot$_internal_binary_WithdrawAmount((slice) $self, (int) $msg) impure inline {
    var ($self'owner) = $self;
    var ($msg'amount) = $msg;
    ($self'owner)~$Pot$_fun_ownerOnly();
    int $amount = min($msg'amount, ((__tact_my_balance() - $Context$_get_value(__tact_context_get())) - 10000000));
    $global_send($SendParameters$_constructor_to_value_mode_bounce(__tact_context_get_sender(), $amount, (2 + 64), true));
    return (($self'owner), ());
}

(((slice)), ()) $Pot$_internal_binary_GenerateReferral((slice) $self, (slice, slice, slice) $msg) impure inline {
    var ($self'owner) = $self;
    var ($msg'jobId, $msg'link, $msg'generatedBy) = $msg;
    if (($Context$_get_value(__tact_context_get()) >= 1050000000)) {
        var ($refInit'code, $refInit'data) = ($self'owner)~$Pot$_fun_getRefInit($msg'jobId, $msg'link);
        $global_send($SendParameters$_constructor_to_value_mode_bounce_code_data_body($global_contractAddress(($refInit'code, $refInit'data)), 0, (2 + 64), true, $refInit'code, $refInit'data, $Affiliate$_store_cell($Affiliate$_constructor_affiliate($msg'generatedBy))));
    }
    return (($self'owner), ());
}

(((slice)), ()) $Pot$_internal_binary_CandidateRegistered((slice) $self, (int, slice, slice) $msg) impure inline {
    var ($self'owner) = $self;
    var ($msg'rating, $msg'jobId, $msg'link) = $msg;
    var ($refInit'code, $refInit'data) = ($self'owner)~$Pot$_fun_getRefInit($msg'jobId, $msg'link);
    if (($msg'rating < 3)) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($global_contractAddress(($refInit'code, $refInit'data)), 0, (2 + 64), true, __gen_cell_comment_a3677a10b380dd94931e32fde88aaf77059d02a6762344ce67b22a668aa7a199()));
    } elseif (( (($msg'rating > 3)) ? (($msg'rating <= 5)) : (false) )) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($global_contractAddress(($refInit'code, $refInit'data)), 1000000000, (2 + 64), true, __gen_cell_comment_f3a89b1e1fcd95302485a334adff0358a844d4f035b971c74cfdaa37ac5c140b()));
    } elseif (($msg'rating == 3)) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($global_contractAddress(($refInit'code, $refInit'data)), 0, (2 + 64), true, __gen_cell_comment_6ef41a1603279cbd03396d3a3593d3f465c968554125a8b39067ebfc8b060d65()));
    } else {
        ($self'owner)~$Pot$_fun_reply(__gen_cell_comment_c5494b4f7852af6bfb615d172e5e847b5de3544b8ae2c38143e06f7c6805bf0d());
    }
    return (($self'owner), ());
}

(((slice)), ()) $Pot$_internal_binary_Deploy((slice) $self, (int) $deploy) impure inline {
    var ($self'owner) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner)~$Pot$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner), ());
}

;;
;; Get methods of a Contract Pot
;;

_ %balance() method_id(104128) {
    var self = $Pot$_contract_load();
    var res = self~$Pot$_fun_balance();
    return res;
}

_ %address() method_id(69216) {
    var self = $Pot$_contract_load();
    var res = self~$Pot$_fun_address();
    return res;
}

_ %owner() method_id(83229) {
    var self = $Pot$_contract_load();
    var res = self~$Pot$_fun_owner();
    return res;
}

_ %linkAddress(slice $$jobId, slice $$link) method_id(115628) {
    slice $jobId = $$jobId;
    slice $link = $$link;
    var self = $Pot$_contract_load();
    var res = self~$Pot$_fun_linkAddress($jobId, $link);
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmZ8g2CpdCgpfrReezdRDwtj3fPmeWvwE7zi9PAcmCRuU4";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Pot
;;

((slice), int) $Pot$_contract_router_internal((slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$Pot$_internal_empty();
        return (self, true);
    }
    
    ;; Receive WithdrawAmount message
    if (op == 1566890017) {
        var msg = in_msg~$WithdrawAmount$_load();
        self~$Pot$_internal_binary_WithdrawAmount(msg);
        return (self, true);
    }
    
    ;; Receive GenerateReferral message
    if (op == 3698258767) {
        var msg = in_msg~$GenerateReferral$_load();
        self~$Pot$_internal_binary_GenerateReferral(msg);
        return (self, true);
    }
    
    ;; Receive CandidateRegistered message
    if (op == 1019638918) {
        var msg = in_msg~$CandidateRegistered$_load();
        self~$Pot$_internal_binary_CandidateRegistered(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Pot$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "withdrawAll" message
        if (text_op == 0x63365f83ad1d185f336d0e64cfce19190f3623d6d976c30c6198ac209c8946ee) {
            self~$Pot$_internal_text_63365f83ad1d185f336d0e64cfce19190f3623d6d976c30c6198ac209c8946ee();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Pot$_contract_load();
    
    ;; Handle operation
    int handled = self~$Pot$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Pot$_contract_store(self);
}
